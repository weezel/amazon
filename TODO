TODO:
  amazoncommentfetcher.py
	o  Do a better comment start matcher,
	   otherwise program is completed, though


Arjen:
  WIS:
	[X]  Webcrawling amazon. For each product all comments made about this
	product need to be retrieved. A webcrawler needs to be made that downloads
	each individual comment from amazon and stores all these comments.
  IR:
	[X]  From the collection of comments, the keywords have to be retreived. For
	each unique keyword found in the comments we store:
  	  [X]  The number of comments in which this keyword appears.
  	  [X]  The average rating based on the ratings of the comments.

	[½]  Filtering is used to display the keywords that are of interest to the
	user.  Stopwords are removed from the list. The user is given the
	possibility of filtering for certain intersting combinations of words for
	example, adjective combined with subjects etc.
  ML:
	[ ]  The application should be able to determine whether certain keywords can
	be concidered good or bad for the product. This will be done based on the
	rating information and user input. Keywords will be classification based on
	their rating. This information could indicate that a keyword is bad for one
	product and good for another.


Ville:
  WIS:
	[X]  Webcrawling amazon. For each product all comments made about this
	product need to be retrieved. A webcrawler needs to be made that downloads
	each individual comment from amazon and stores all these comments.
  IR:
	[½]  Typing errors may result in certain keywords appearing multiple times
	in the list for example, button, buttn, buttonn or even buttons. We want to
	give the user the option to combine these keywords. Two algorithms
	levenstein and dice coefficient are investigated to see what gives the best
	results. In our application it is important to not combine keywords with
	different meaning.  Due to the large size of the list we need to
	investigate how to apply the algorithms in such a way that the application
	is not too slow.
  ML:
	[½]  The application should be able to give a verdict based on the keywords
	whether a product is concidered to be good or bad. To determine this
	we use frequency–inverse document frequency and compare results against the
	naive bayesian rules whether the product is good or bad.
	[ ]  We show both classification results and intersection of them.


Javier:
IR:
	[ ]  Once a user finds a keyword he is interested in, the user wants to find
	out why this keyword is relevant to the product. The application should
	link a keyword to the most relevant comments for this keyword such that the
	user can quickly find the relation between the keyword and the product.
	The user would also want to compare the keyword between multiple products
	he selected.
ML:
	[ ]  Association rules analyzis based on the keywords, number of the
	appearances and rating.


