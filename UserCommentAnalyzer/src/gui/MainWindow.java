/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Nov 22, 2010, 4:17:37 AM
 */
package gui;

import gui.aboutUs.AboutUsWindow;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import wordRetrieval.KeywordRetrieval;
import wordRetrieval.WordInfo;
import wordRetrieval.WordRetrievalFilter;

/**
 * Main window of the user comment analyzer application.
 *
 * @author javiersalcedogomez
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Command to execute in the runtime command.
     */
    public static final String COMMAND = "python";
    /**
     * Python program for fetching the comments from the amazon.com.
     */
    public static final String ARGUMENTS = "src/commentFetcher/python/amazoncommentfetcher.py";
    /**
     * Keyword generated list from the word retrieval process.
     */
    private ArrayList<WordInfo[]> _productKeywordList;
    /**
     * Main window unique class instance.
     */
    private static MainWindow _instance;
    /**
     * Panels displayed with the products to compare.
     */
    private ArrayList<ProductPanel> _productPanelList;
    /**
     * Word retrieval manager of the application.
     */
    private KeywordRetrieval _wordRetrieval;
    /**
     * Thread which executes the fetching process.
     */
    private Thread _process;

    /**
     * Creates the Main Window of the application.
     */
    public MainWindow() {

        // Initializes the window components.
        initComponents();

        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;

        // Move the window
        setLocation(x, y);

        // Creates the word retrieval manager
        _wordRetrieval = new KeywordRetrieval();

        // Creates the keyword list
        _productKeywordList = new ArrayList<WordInfo[]>();

        // Creates the product panel list
        _productPanelList = new ArrayList<ProductPanel>();
    }

    /**
     * Returns the unique main window class instance.
     * 
     * @return the unique main window class instance.
     */
    public static MainWindow getInstance() {

        if (_instance == null) {
            _instance = new MainWindow();
        }
        return _instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        _searchPanel = new javax.swing.JPanel();
        _URLProductPanel = new javax.swing.JPanel();
        _URLProduct1 = new javax.swing.JLabel();
        _URLProduct1TextField = new javax.swing.JTextField();
        _buttonPanel = new javax.swing.JPanel();
        _generateResultsButton = new javax.swing.JButton();
        _filterPanel = new javax.swing.JPanel();
        _singleKeywordsRadioButton = new javax.swing.JRadioButton();
        _combinedKeywordsRadioButton = new javax.swing.JRadioButton();
        _adjectivesCheckBox = new javax.swing.JCheckBox();
        _resultsScrollPane = new javax.swing.JScrollPane();
        _resultsPanel = new javax.swing.JPanel();
        _menuBar = new javax.swing.JMenuBar();
        _fileMenu = new javax.swing.JMenu();
        _exitMenuItem = new javax.swing.JMenuItem();
        _helpMenu = new javax.swing.JMenu();
        _aboutUsMenuItem = new javax.swing.JMenuItem();
        _helpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Comment Analyzer");
        setExtendedState(1);
        setResizable(false);

        _searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Configuration"));
        _searchPanel.setLayout(new java.awt.BorderLayout());

        _URLProductPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("URL Product Configuration"));
        _URLProductPanel.setLayout(new java.awt.GridBagLayout());

        _URLProduct1.setText("Type the product URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 5);
        _URLProductPanel.add(_URLProduct1, gridBagConstraints);

        _URLProduct1TextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                _URLProduct1TextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 550;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        _URLProductPanel.add(_URLProduct1TextField, gridBagConstraints);

        _searchPanel.add(_URLProductPanel, java.awt.BorderLayout.CENTER);

        _buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _generateResultsButton.setText("Generate product results");
        _generateResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateResultsButtonActionPerformed(evt);
            }
        });
        _buttonPanel.add(_generateResultsButton);

        _searchPanel.add(_buttonPanel, java.awt.BorderLayout.PAGE_END);

        _filterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("keyword Retrieval Filters "));
        _filterPanel.setLayout(new java.awt.GridBagLayout());

        _singleKeywordsRadioButton.setSelected(true);
        _singleKeywordsRadioButton.setText("Single Keywords");
        _singleKeywordsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleKeywordsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        _filterPanel.add(_singleKeywordsRadioButton, gridBagConstraints);

        _combinedKeywordsRadioButton.setText("Combined Keywords");
        _combinedKeywordsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _combinedKeywordsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        _filterPanel.add(_combinedKeywordsRadioButton, gridBagConstraints);

        _adjectivesCheckBox.setText("Adjectives");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        _filterPanel.add(_adjectivesCheckBox, gridBagConstraints);

        _searchPanel.add(_filterPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(_searchPanel, java.awt.BorderLayout.NORTH);

        _resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results panel"));
        _resultsPanel.setLayout(new java.awt.GridBagLayout());
        _resultsScrollPane.setViewportView(_resultsPanel);

        getContentPane().add(_resultsScrollPane, java.awt.BorderLayout.CENTER);

        _fileMenu.setText("File");

        _exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        _exitMenuItem.setText("Exit");
        _exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        _fileMenu.add(_exitMenuItem);

        _menuBar.add(_fileMenu);

        _helpMenu.setText("Help");

        _aboutUsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        _aboutUsMenuItem.setText("About us...");
        _aboutUsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _aboutUsMenuItemActionPerformed(evt);
            }
        });
        _helpMenu.add(_aboutUsMenuItem);

        _helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        _helpMenuItem.setText("Help");
        _helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _helpMenuItemActionPerformed(evt);
            }
        });
        _helpMenu.add(_helpMenuItem);

        _menuBar.add(_helpMenu);

        setJMenuBar(_menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-975)/2, (screenSize.height-725)/2, 975, 725);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the application.
     *
     * @param evt action event.
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed

        // Exits the application
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Generates the comments.txt file for the URL of the typed product and
     * displays:
     *    - The fetching process in a separate progress window.
     *    - The results in the main window:
     *        - Adds the new generated list with the selected word retrieval
     *        parameters in the new keyword tab.
     *        - Adds a new tab with all the info of the product.
     *
     * @param evt action event.
     */
    private void generateResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateResultsButtonActionPerformed

        // Runs the fetching process
        //runFetchingProcess();

        // Updates the keyword list with the new product
        updatesKeywordList();

        // Builds the results panel
        buildResultsPanel();
    }//GEN-LAST:event_generateResultsButtonActionPerformed

    /**
     * Runs the fetching process in a separate thread.
     */
    private void runFetchingProcess() {

        // Starts the proccess in a separate thread
        _process = new Thread(new Runnable() {

            @Override
            public void run() {

                // Creates the string buffer for reading the output from the python program
                StringBuffer message = new StringBuffer();
                // Clears the text pane content
                ProgressWindow.getInstance().clearTextPaneContent();
                // Shows the progress window
                ProgressWindow.getInstance().showProgressWindow();
                // Calls the python program to obtain the input data
                try {
                    Process process = Runtime.getRuntime().exec(COMMAND + " " + ARGUMENTS + " " + _URLProduct1TextField.getText());
                    // Gets the input stream with the results of the commentfetcheranalyzer
                    InputStream inputStream = process.getInputStream();
                    InputStream errorStream = process.getErrorStream();
                    BufferedReader bufferedInput = new BufferedReader(new InputStreamReader(inputStream));
                    BufferedReader bufferedError = new BufferedReader(new InputStreamReader(errorStream));
                    while (true) {
                        if (inputStream.available() > 0) {
                            String lineIn;
                            while ((lineIn = bufferedInput.readLine()) != null) {
                                // Updates the progress window
                                ProgressWindow.getInstance().updateProgressWindow(lineIn);
                                message.append(lineIn);
                                message.append(System.getProperty("line.separator"));
                            }
                        }
                        if (errorStream.available() > 0) {
                            String lineIn;
                            while ((lineIn = bufferedError.readLine()) != null) {
                                // Updates the progress window
                                ProgressWindow.getInstance().updateProgressWindow(lineIn);
                                message.append("ERROR: ");
                                message.append(lineIn);
                                message.append(System.getProperty("line.separator"));
                            }
                        }
                        try {
                            process.exitValue();
                            break;
                        } catch (Throwable throwable) {
                            Thread.sleep(1000);
                        }
                    }
                    bufferedInput.close();
                    bufferedError.close();
                } catch (Throwable throwable) {
                    // Updates the log
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, throwable);
                }

                ProgressWindow.getInstance().closeProgressWindow();
            }
        });
        _process.start();
//        _process.join();

    }

    /**
     * Updates the keyword list with the last keyword list generated by the
     * keyword retrieval algorithm.
     */
    public void updatesKeywordList() {
        try {
            // Gets the type of the word retrieval algorithm
            WordRetrievalFilter filter = WordRetrievalFilter.SINGLE;
            if (_combinedKeywordsRadioButton.isSelected()) {
                filter = WordRetrievalFilter.COMBINED;
            }

            // Adds the last keyword list to the product keyword list
            _productKeywordList.add(_wordRetrieval.run(filter, _adjectivesCheckBox.isSelected()));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Builds the results panel. Always builds the results panel with the
     * product keyword list.
     */
    public void buildResultsPanel() {

        // Removes all the panels 
        _resultsPanel.removeAll();

        // Clears the product panel list
        _productPanelList.clear();

        // Builds the results panel
        for (int index = 0; index < _productKeywordList.size(); index++) {
            
            // Creates the product panel
            ProductPanel productPanel = new ProductPanel(index);

            // Creates a border with the number of the product
            productPanel.setBorder(BorderFactory.createTitledBorder("Product " + (index + 1)));

            // Updates the keyword list to display
            productPanel.setProductList(_productKeywordList.get(index));

            // Adds the product panel to the results panel
            GridBagConstraints constraints = new GridBagConstraints();
            constraints.gridx = index;
            constraints.gridy = 0;
            _resultsPanel.add(productPanel, constraints);

            // Updates the product panel list
            _productPanelList.add(productPanel);
        }

        validate();
        repaint();
    }

    /**
     * Returns the product keyword list.
     *
     * @return the product keyword list.
     */
    public ArrayList<WordInfo[]> getProductKeywordList() {
        return _productKeywordList;
    }

    /**
     * Selects the single keyword word retrieval filter and unselect the 
     * combined keyword word retrieval filter.
     *  
     * @param evt action event
     */
    private void singleKeywordsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleKeywordsRadioButtonActionPerformed

        _singleKeywordsRadioButton.setSelected(true);
        _combinedKeywordsRadioButton.setSelected(false);
    }//GEN-LAST:event_singleKeywordsRadioButtonActionPerformed

    /**
     * Selects the combined keyword word retrieval filter and unselect the 
     * single keyword word retrieval filter.
     *  
     * @param evt action event
     */
    private void _combinedKeywordsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__combinedKeywordsRadioButtonActionPerformed

        _singleKeywordsRadioButton.setSelected(false);
        _combinedKeywordsRadioButton.setSelected(true);
    }//GEN-LAST:event__combinedKeywordsRadioButtonActionPerformed

    /**
     * About us menu item action listener.
     * 
     * @param evt action event.
     */
    private void _aboutUsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__aboutUsMenuItemActionPerformed

        // Shows the about us window
        new AboutUsWindow().setVisible(true);

    }//GEN-LAST:event__aboutUsMenuItemActionPerformed

    /**
     * Help menu item action listener.
     * 
     * @param evt action event.
     */
    private void _helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__helpMenuItemActionPerformed
        // Shows the help file of the application
    }//GEN-LAST:event__helpMenuItemActionPerformed

    /**
     * URL product text field key pressed listener.
     * 
     * @param evt action event
     */
    private void _URLProduct1TextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event__URLProduct1TextFieldKeyPressed

        // If the user presses the ENTER 
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            _generateResultsButton.doClick();
        }
    }//GEN-LAST:event__URLProduct1TextFieldKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel _URLProduct1;
    private javax.swing.JTextField _URLProduct1TextField;
    private javax.swing.JPanel _URLProductPanel;
    private javax.swing.JMenuItem _aboutUsMenuItem;
    private javax.swing.JCheckBox _adjectivesCheckBox;
    private javax.swing.JPanel _buttonPanel;
    private javax.swing.JRadioButton _combinedKeywordsRadioButton;
    private javax.swing.JMenuItem _exitMenuItem;
    private javax.swing.JMenu _fileMenu;
    private javax.swing.JPanel _filterPanel;
    private javax.swing.JButton _generateResultsButton;
    private javax.swing.JMenu _helpMenu;
    private javax.swing.JMenuItem _helpMenuItem;
    private javax.swing.JMenuBar _menuBar;
    private javax.swing.JPanel _resultsPanel;
    private javax.swing.JScrollPane _resultsScrollPane;
    private javax.swing.JPanel _searchPanel;
    private javax.swing.JRadioButton _singleKeywordsRadioButton;
    // End of variables declaration//GEN-END:variables
}
