/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProgressWindow.java
 *
 * Created on Nov 19, 2010, 1:34:34 PM
 */
package gui;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 * Fetching comment analysis window. Displays a progress bar which shows the
 * process status and gives the chance to the user to stop the process pressing
 * the stop process button.
 *
 * @author javiersalcedogomez
 */
public class ProgressWindow extends JFrame{

    /**
     * Progress window unique class instance.
     */
    private static ProgressWindow _instance;

    /**
     * Returns the unique class instance.
     *
     * @return the unique class instance.
     */
    public static ProgressWindow getInstance() {

        if(_instance == null)
            _instance = new ProgressWindow();
        return _instance;    
    }

    /** 
     * Creates new form ProgressWindow.
     */
    public ProgressWindow() {
        
        initComponents();

        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;

        // Move the window
        setLocation(x, y);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        _progressPanel = new javax.swing.JPanel();
        _scrollPane = new javax.swing.JScrollPane();
        _progressProcessTextPane = new javax.swing.JTextPane();
        _buttonPanel = new javax.swing.JPanel();
        _closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(ProgressWindow.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setBounds(new java.awt.Rectangle(10, 10, 10, 10));
        setName("Form"); // NOI18N
        setResizable(false);

        _progressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Fetching comments progress status"));
        _progressPanel.setName("_progressPanel"); // NOI18N
        _progressPanel.setLayout(new java.awt.GridBagLayout());

        _scrollPane.setAutoscrolls(true);
        _scrollPane.setName("_scrollPane"); // NOI18N

        _progressProcessTextPane.setBackground(resourceMap.getColor("_progressProcessTextPane.background")); // NOI18N
        _progressProcessTextPane.setEditable(false);
        _progressProcessTextPane.setForeground(resourceMap.getColor("_progressProcessTextPane.foreground")); // NOI18N
        _progressProcessTextPane.setCaretColor(resourceMap.getColor("_progressProcessTextPane.caretColor")); // NOI18N
        _progressProcessTextPane.setName("_progressProcessTextPane"); // NOI18N
        _scrollPane.setViewportView(_progressProcessTextPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.ipady = 300;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        _progressPanel.add(_scrollPane, gridBagConstraints);

        getContentPane().add(_progressPanel, java.awt.BorderLayout.CENTER);

        _buttonPanel.setName("_buttonPanel"); // NOI18N
        _buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _closeButton.setText(resourceMap.getString("_closeButton.text")); // NOI18N
        _closeButton.setEnabled(false);
        _closeButton.setName("_closeButton"); // NOI18N
        _closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _closeButtonActionPerformed(evt);
            }
        });
        _buttonPanel.add(_closeButton);

        getContentPane().add(_buttonPanel, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-450)/2, (screenSize.height-600)/2, 450, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void _closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__closeButtonActionPerformed

        // Clsoe the progress window
        closeProgressWindow();

        // Starts the build results process
        MainWindow.getInstance().getGettingResultsProcess().start();
    }//GEN-LAST:event__closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _buttonPanel;
    private javax.swing.JButton _closeButton;
    private javax.swing.JPanel _progressPanel;
    private javax.swing.JTextPane _progressProcessTextPane;
    private javax.swing.JScrollPane _scrollPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Shows the progress window.
     */
    public void showProgressWindow(){

        // Disables the close button
        _closeButton.setEnabled(false);

        // Shows the progress window
        setVisible(true);
    }

    /**
     * Updates the progress bar with the current value.
     *
     * @param value new value to set.
     */
    public void updateProgressWindow(final String value){

        SwingUtilities.invokeLater(new Runnable(){

            @Override
            public void run() {

                //_progressBar.setValue(Integer.parseInt(value));
                _progressProcessTextPane.setText(_progressProcessTextPane.getText().concat(value) + "\n");

                validate();
                repaint();
            }
        });     
    }

    /**
     * Closes the progress window.
     */
    public void closeProgressWindow() {

        // Closes this window
        dispose();
    }

    /**
     * Clears the text pane of the progress window.
     */
    public void clearTextPaneContent(){

        // Clears the text area which displays the process
        _progressProcessTextPane.setText("");
    }

    /**
     * Enables the close button once the fetching process has been done.
     */
    public void enableCloseButton() {
        _closeButton.setEnabled(true);
    }
}
