/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Nov 22, 2010, 4:17:37 AM
 */
package gui.mainWindow;

import ML.associationRules.AssociationRulesWindow;
import process.ApplyFilterProcess;
import process.KeywordRetrievalProcess;
import gui.aboutUs.AboutUsWindow;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;
import process.FetchingProcess;
import wordRetrieval.KeywordRetrieval;
import wordRetrieval.WordInfo;

/**
 * Main window of the user comment analyzer application.
 *
 * @author javiersalcedogomez
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Keyword generated list from the word retrieval process.
     */
    private ArrayList<WordInfo[]> _productKeywordList;
    /**
     * Main window unique class instance.
     */
    private static MainWindow _instance;
    /**
     * Panels displayed with the products to compare.
     */
    private ArrayList<ProductPanel> _productPanelList;
    /**
     * Word retrieval manager of the application.
     */
    private KeywordRetrieval _wordRetrieval;
    /**
     * Thread which executes the fetching process.
     */
    private FetchingProcess _fetchingProcess;
    /**
     * Thread which executes the keyword retrieval process.
     */
    private KeywordRetrievalProcess _keywordRetrievalProcess;
    /**
     * Thread which executes the applying filter process.
     */
    private ApplyFilterProcess _appyFilterProcess;

    /**
     * Creates the Main Window of the application.
     */
    public MainWindow() {

        // Initializes the window components.
        initComponents();

        // Get the size of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

        // Determine the new location of the window
        int w = getSize().width;
        int h = getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;

        // Move the window
        setLocation(x, y);

        // Creates the word retrieval manager
        _wordRetrieval = new KeywordRetrieval();

        // Creates the keyword list
        _productKeywordList = new ArrayList<WordInfo[]>();

        // Creates the product panel list
        _productPanelList = new ArrayList<ProductPanel>();
    }

    /**
     * Returns the unique main window class instance.
     * 
     * @return the unique main window class instance.
     */
    public static MainWindow getInstance() {

        if (_instance == null) {
            _instance = new MainWindow();
        }
        return _instance;
    }

    /**
     * Updates the keyword list with the last keyword list generated by the
     * keyword retrieval algorithm and the selection panel.
     */
    public void updatesKeywordList() {
        try {

            // Run the keyword retrieval process
            MainWindow.getInstance().runKeywordRetrieval();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Builds the results panel. Always builds the results panel with the
     * product keyword list.
     */
    public void buildResultsPanel() {

        // Removes all the panels
        _productsPanel.removeAll();

        // Clears the product panel list
        _productPanelList.clear();

        // Builds the results panel
        for (int index = 0; index < _productKeywordList.size(); index++) {

            // Creates the product panel
            ProductPanel productPanel = new ProductPanel(index);

            // Creates a border with the number of the product
            productPanel.setBorder(BorderFactory.createTitledBorder(null, "Product " + (index + 1), TitledBorder.CENTER, TitledBorder.TOP, new Font("Lucida Grande", 0, 13), new Color(80, 80, 100)));

            // Updates the keyword list to display
            productPanel.setProductList(_productKeywordList.get(index));

            // Adds the product panel to the results panel
            GridBagConstraints constraints = new GridBagConstraints();
            constraints.insets = new Insets(5,5,5,5);
            constraints.fill = GridBagConstraints.VERTICAL;
            constraints.anchor = GridBagConstraints.CENTER;
            constraints.ipadx = 225;
            constraints.weighty = 1.0;
            constraints.gridx = index;
            constraints.gridy = 0;
            _productsPanel.add(productPanel, constraints);

            // Updates the product panel list
            _productPanelList.add(productPanel);
        }

        // Updates the selection keyword list with the new panel
        String panels[] = new String[_productPanelList.size()];

        for (int index = 0; index < _productPanelList.size(); index++) {
            panels[index] = _productPanelList.get(index).getProductPanelName();
        }

        _selectionKeywordList.setListData(panels);

        // Enables or disables the apply filter button depending on the
        // product keyword list size
        _applyFilterButton.setEnabled(!_productKeywordList.isEmpty());

        // Validates the changes in the main window
        validate();

        // Repaints the main window
        repaint();
    }

    /**
     * Applies the filter to all the displayed panels.
     */
    public void applyFilter() {

        // Builds the results panel
        for (int index = 0; index < _productKeywordList.size(); index++) {

            try {

                // If the product is selected in the list
                if (_selectionKeywordList.isSelectedIndex(index)) 
                    // Rebuilds the keywordlist
                    _productKeywordList.set(index, _wordRetrieval.run(_keywordRetrievalFilterTextField.getText(), index + 1)); 

            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Updates the product list in the panel
            _productPanelList.get(index).setProductList(_productKeywordList.get(index));
        }

        // Validates the changes in the main window
        validate();

        // Repaints the main window
        repaint();
    }

    /**
     * Returns the products panel.
     *
     * @return the products panel.
     */
    public JPanel getProductsPanel() {
        return _productsPanel;
    }

    /**
     * Returns the product panel list.
     *
     * @return the product panel list.
     */
    public ArrayList<ProductPanel> getProductPanelList() {
        return _productPanelList;
    }

    /**
     * Returns the product keyword list.
     *
     * @return the product keyword list.
     */
    public ArrayList<WordInfo[]> getProductKeywordList() {
        return _productKeywordList;
    }

    /**
     * Returns the getting results process thread.
     *
     * @return the getting results process thread.
     */
    public Thread getGettingResultsProcess() {
        return _keywordRetrievalProcess;
    }

    /**
     * Returns the URL product text field text.
     *
     * @return the URL product text field text.
     */
    public String getURLProductText() {
        return _URLProductTextField.getText();
    }

    /**
     * Runs the keyword retrieval algorithm with the specified filter.
     *
     * @throws IOException
     */
    public void runKeywordRetrieval() throws IOException {

        // Adds the new keyword list to the keyword list
        _productKeywordList.add(_wordRetrieval.run(
                _keywordRetrievalFilterTextField.getText(),
                _productKeywordList.size() + 1));
    }

    /**
     * Selects the keyword given as a parameter in the other lists.
     *
     * @param keyword the keyword to select.
     */
    public void selectKeywordInOtherLists(String keyword) {

        for (int index = 0; index < _productPanelList.size(); index++) {

            // Gets the product from the list
            ProductPanel productPanel = _productPanelList.get(index);

            // Selects the keyword in other lists
            productPanel.setSelectedKeyword(keyword);
        }
    }

    /**
     * Returns the apply filter button.
     *
     * @return the apply filter button.
     */
    public JButton getApplyFilterButton() {
        return _applyFilterButton;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        _logoPanel = new javax.swing.JPanel();
        _imageLabel = new javax.swing.JLabel();
        _searchPanel = new javax.swing.JPanel();
        _URLProductPanel = new javax.swing.JPanel();
        _URLProduct = new javax.swing.JLabel();
        _URLProductTextField = new javax.swing.JTextField();
        _buttonPanel = new javax.swing.JPanel();
        _generateResultsButton = new javax.swing.JButton();
        _resultsPanel = new javax.swing.JPanel();
        _selectionPanel = new javax.swing.JPanel();
        _selectionKeywordListScrollPane = new javax.swing.JScrollPane();
        _selectionKeywordList = new javax.swing.JList();
        _selectionLabel = new javax.swing.JLabel();
        _selectionButtonPanel = new javax.swing.JPanel();
        _selectAllButton = new javax.swing.JButton();
        _deselectAllButton = new javax.swing.JButton();
        _productsPanelScrollPane = new javax.swing.JScrollPane();
        _productsPanel = new javax.swing.JPanel();
        _filterPanel = new javax.swing.JPanel();
        _keywordRetrievalFilterLabel = new javax.swing.JLabel();
        _keywordRetrievalFilterTextField = new javax.swing.JTextField();
        _helpButton = new javax.swing.JButton();
        _applyFilterButton = new javax.swing.JButton();
        _menuBar = new javax.swing.JMenuBar();
        _fileMenu = new javax.swing.JMenu();
        _exitMenuItem = new javax.swing.JMenuItem();
        _helpMenu = new javax.swing.JMenu();
        _aboutUsMenuItem = new javax.swing.JMenuItem();
        _helpMenuItem = new javax.swing.JMenuItem();
        _machineLearningMenu = new javax.swing.JMenu();
        _associationRulesMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Comment Analyzer");
        setBackground(new java.awt.Color(170, 185, 210));
        setExtendedState(1);
        setSize(new java.awt.Dimension(950, 768));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        _logoPanel.setBackground(new java.awt.Color(255, 255, 255));
        _logoPanel.setLayout(new java.awt.BorderLayout());

        _imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/UCALogo.png"))); // NOI18N
        _logoPanel.add(_imageLabel, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(_logoPanel, gridBagConstraints);

        _searchPanel.setBackground(new java.awt.Color(170, 185, 210));
        _searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Configuration", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(80, 80, 100))); // NOI18N
        _searchPanel.setForeground(new java.awt.Color(80, 80, 100));
        _searchPanel.setLayout(new java.awt.BorderLayout());

        _URLProductPanel.setBackground(new java.awt.Color(170, 185, 210));
        _URLProductPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "URL Product Configuration", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(80, 80, 100))); // NOI18N
        _URLProductPanel.setForeground(new java.awt.Color(80, 80, 100));
        _URLProductPanel.setLayout(new java.awt.GridBagLayout());

        _URLProduct.setBackground(new java.awt.Color(170, 185, 210));
        _URLProduct.setForeground(new java.awt.Color(80, 80, 100));
        _URLProduct.setText("Type the product URL:");
        _URLProduct.setPreferredSize(new java.awt.Dimension(60, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        _URLProductPanel.add(_URLProduct, gridBagConstraints);

        _URLProductTextField.setForeground(new java.awt.Color(80, 80, 100));
        _URLProductTextField.setPreferredSize(new java.awt.Dimension(14, 25));
        _URLProductTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                _URLProductTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.9;
        _URLProductPanel.add(_URLProductTextField, gridBagConstraints);

        _searchPanel.add(_URLProductPanel, java.awt.BorderLayout.CENTER);

        _buttonPanel.setBackground(new java.awt.Color(170, 185, 210));
        _buttonPanel.setForeground(new java.awt.Color(80, 80, 100));
        _buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _generateResultsButton.setBackground(new java.awt.Color(170, 185, 210));
        _generateResultsButton.setForeground(new java.awt.Color(80, 80, 100));
        _generateResultsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/Script.png"))); // NOI18N
        _generateResultsButton.setText("Generate product results");
        _generateResultsButton.setToolTipText("Generates the product keyword list associated to the typed URL");
        _generateResultsButton.setPreferredSize(new java.awt.Dimension(193, 30));
        _generateResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateResultsButtonActionPerformed(evt);
            }
        });
        _buttonPanel.add(_generateResultsButton);

        _searchPanel.add(_buttonPanel, java.awt.BorderLayout.PAGE_END);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(_searchPanel, gridBagConstraints);

        _resultsPanel.setBackground(new java.awt.Color(170, 185, 210));
        _resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Results panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(80, 80, 100))); // NOI18N
        _resultsPanel.setForeground(new java.awt.Color(80, 80, 100));
        _resultsPanel.setPreferredSize(new java.awt.Dimension(438, 207));
        _resultsPanel.setLayout(new java.awt.BorderLayout());

        _selectionPanel.setBackground(new java.awt.Color(170, 185, 210));
        _selectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selection Panel", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(80, 80, 100))); // NOI18N
        _selectionPanel.setForeground(new java.awt.Color(80, 80, 100));
        _selectionPanel.setLayout(new java.awt.BorderLayout(0, 10));

        _selectionKeywordList.setForeground(new java.awt.Color(80, 80, 100));
        _selectionKeywordList.setToolTipText("Product list");
        _selectionKeywordList.setSelectionBackground(new java.awt.Color(95, 115, 155));
        _selectionKeywordListScrollPane.setViewportView(_selectionKeywordList);

        _selectionPanel.add(_selectionKeywordListScrollPane, java.awt.BorderLayout.CENTER);

        _selectionLabel.setBackground(new java.awt.Color(170, 185, 210));
        _selectionLabel.setForeground(new java.awt.Color(80, 80, 100));
        _selectionLabel.setText("Selects a product from the list:");
        _selectionPanel.add(_selectionLabel, java.awt.BorderLayout.PAGE_START);

        _selectionButtonPanel.setBackground(new java.awt.Color(170, 185, 210));
        _selectionButtonPanel.setForeground(new java.awt.Color(80, 80, 100));
        _selectionButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _selectAllButton.setBackground(new java.awt.Color(170, 185, 210));
        _selectAllButton.setForeground(new java.awt.Color(80, 80, 100));
        _selectAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/selectAll.png"))); // NOI18N
        _selectAllButton.setText("Select All");
        _selectAllButton.setToolTipText("Selects all the products in the list above");
        _selectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _selectAllButtonActionPerformed(evt);
            }
        });
        _selectionButtonPanel.add(_selectAllButton);

        _deselectAllButton.setBackground(new java.awt.Color(170, 185, 210));
        _deselectAllButton.setForeground(new java.awt.Color(80, 80, 100));
        _deselectAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/deselectAll.png"))); // NOI18N
        _deselectAllButton.setText("Deselect All");
        _deselectAllButton.setToolTipText("Deselects all the products in the list above");
        _deselectAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _deselectAllButtonActionPerformed(evt);
            }
        });
        _selectionButtonPanel.add(_deselectAllButton);

        _selectionPanel.add(_selectionButtonPanel, java.awt.BorderLayout.PAGE_END);

        _resultsPanel.add(_selectionPanel, java.awt.BorderLayout.WEST);

        _productsPanel.setBackground(new java.awt.Color(170, 185, 210));
        _productsPanel.setForeground(new java.awt.Color(80, 80, 100));
        _productsPanel.setLayout(new java.awt.GridBagLayout());
        _productsPanelScrollPane.setViewportView(_productsPanel);

        _resultsPanel.add(_productsPanelScrollPane, java.awt.BorderLayout.CENTER);

        _filterPanel.setBackground(new java.awt.Color(170, 185, 210));
        _filterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "keyword Retrieval Filters ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Lucida Grande", 0, 13), new java.awt.Color(80, 80, 100))); // NOI18N
        _filterPanel.setForeground(new java.awt.Color(80, 80, 100));
        _filterPanel.setLayout(new java.awt.GridBagLayout());

        _keywordRetrievalFilterLabel.setBackground(new java.awt.Color(170, 185, 210));
        _keywordRetrievalFilterLabel.setForeground(new java.awt.Color(80, 80, 100));
        _keywordRetrievalFilterLabel.setText("Type the keyword retrieval filter: ");
        _keywordRetrievalFilterLabel.setPreferredSize(new java.awt.Dimension(216, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        _filterPanel.add(_keywordRetrievalFilterLabel, gridBagConstraints);

        _keywordRetrievalFilterTextField.setForeground(new java.awt.Color(80, 80, 100));
        _keywordRetrievalFilterTextField.setText("[+]");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        _filterPanel.add(_keywordRetrievalFilterTextField, gridBagConstraints);

        _helpButton.setBackground(new java.awt.Color(170, 185, 210));
        _helpButton.setForeground(new java.awt.Color(80, 80, 100));
        _helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/help.png"))); // NOI18N
        _helpButton.setToolTipText("Displays a help file with the filter usage");
        _helpButton.setContentAreaFilled(false);
        _helpButton.setOpaque(true);
        _helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _helpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        _filterPanel.add(_helpButton, gridBagConstraints);

        _applyFilterButton.setBackground(new java.awt.Color(170, 185, 210));
        _applyFilterButton.setForeground(new java.awt.Color(80, 80, 100));
        _applyFilterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/Pinion.png"))); // NOI18N
        _applyFilterButton.setText("Apply Filter");
        _applyFilterButton.setToolTipText("Applies the filter to the selected products");
        _applyFilterButton.setEnabled(false);
        _applyFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _applyFilterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        _filterPanel.add(_applyFilterButton, gridBagConstraints);

        _resultsPanel.add(_filterPanel, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(_resultsPanel, gridBagConstraints);

        _menuBar.setBackground(new java.awt.Color(170, 185, 210));

        _fileMenu.setBackground(new java.awt.Color(142, 160, 193));
        _fileMenu.setForeground(new java.awt.Color(80, 80, 100));
        _fileMenu.setText("File");

        _exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        _exitMenuItem.setBackground(new java.awt.Color(170, 185, 210));
        _exitMenuItem.setForeground(new java.awt.Color(80, 80, 100));
        _exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/exit.png"))); // NOI18N
        _exitMenuItem.setText("Exit");
        _exitMenuItem.setToolTipText("Exits the program");
        _exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        _fileMenu.add(_exitMenuItem);

        _menuBar.add(_fileMenu);

        _helpMenu.setBackground(new java.awt.Color(142, 160, 193));
        _helpMenu.setForeground(new java.awt.Color(80, 80, 100));
        _helpMenu.setText("Help");

        _aboutUsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        _aboutUsMenuItem.setBackground(new java.awt.Color(170, 185, 210));
        _aboutUsMenuItem.setForeground(new java.awt.Color(80, 80, 100));
        _aboutUsMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/aboutUs.png"))); // NOI18N
        _aboutUsMenuItem.setText("About us...");
        _aboutUsMenuItem.setToolTipText("Shows up the about us window");
        _aboutUsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _aboutUsMenuItemActionPerformed(evt);
            }
        });
        _helpMenu.add(_aboutUsMenuItem);

        _helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        _helpMenuItem.setBackground(new java.awt.Color(170, 185, 210));
        _helpMenuItem.setForeground(new java.awt.Color(80, 80, 100));
        _helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/helpMenu.png"))); // NOI18N
        _helpMenuItem.setText("Help");
        _helpMenuItem.setToolTipText("Shows up the help file");
        _helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _helpMenuItemActionPerformed(evt);
            }
        });
        _helpMenu.add(_helpMenuItem);

        _menuBar.add(_helpMenu);

        _machineLearningMenu.setBackground(new java.awt.Color(170, 185, 210));
        _machineLearningMenu.setForeground(new java.awt.Color(80, 80, 100));
        _machineLearningMenu.setText("Machine Learning Tools");

        _associationRulesMenuItem.setBackground(new java.awt.Color(170, 185, 210));
        _associationRulesMenuItem.setForeground(new java.awt.Color(80, 80, 100));
        _associationRulesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/rules.png"))); // NOI18N
        _associationRulesMenuItem.setText("Association Rules Generator");
        _associationRulesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _associationRulesMenuItemActionPerformed(evt);
            }
        });
        _machineLearningMenu.add(_associationRulesMenuItem);

        _menuBar.add(_machineLearningMenu);

        setJMenuBar(_menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-850)/2, (screenSize.height-768)/2, 850, 768);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the application.
     *
     * @param evt action event.
     */
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed

        // Exits the application
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    /**
     * Generates the comments.txt file for the URL of the typed product and
     * displays:
     *    - The fetching process in a separate progress window.
     *    - The results in the main window:
     *        - Adds the new generated list with the selected word retrieval
     *        parameters in the new keyword tab.
     *        - Adds a new tab with all the info of the product.
     *
     * @param evt action event.
     */
    private void generateResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateResultsButtonActionPerformed

        if (!_URLProductTextField.getText().matches("")) {

            // The fetching proccess in a separate thread
            _fetchingProcess = new FetchingProcess();

            // The results creation in other different thread
            _keywordRetrievalProcess = new KeywordRetrievalProcess();

            // Starts the fetching process
            _fetchingProcess.start();
        } else {
            JOptionPane.showMessageDialog(this, "You have to type a valid product URL first!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_generateResultsButtonActionPerformed

    /**
     * About us menu item action listener.
     *
     * @param evt action event.
     */
    private void _aboutUsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__aboutUsMenuItemActionPerformed

        // Shows the about us window
        new AboutUsWindow().setVisible(true);
    }//GEN-LAST:event__aboutUsMenuItemActionPerformed

    /**
     * Help menu item action listener.
     *
     * @param evt action event.
     */
    private void _helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__helpMenuItemActionPerformed

        // Shows the help file of the application
        try{
        Desktop.getDesktop().open(new File("src/gui/help/help.pdf"));
        }
        catch(Exception ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event__helpMenuItemActionPerformed

    /**
     * URL product text field key pressed listener.
     *
     * @param evt action event
     */
    private void _URLProductTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event__URLProductTextFieldKeyPressed

        // If the user presses the ENTER 
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            _generateResultsButton.doClick();
        }
    }//GEN-LAST:event__URLProductTextFieldKeyPressed

    /**
     * Apply filter button action performed.
     *
     * Starts a new apply filter process.
     *
     * @param evt action event.
     */
    private void _applyFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__applyFilterButtonActionPerformed

        if (_selectionKeywordList.getSelectedIndex() != -1) {

            // Executes the process in a separate Thread
            _appyFilterProcess = new ApplyFilterProcess();

            // Starts the filter
            _appyFilterProcess.start();
        }
        else{
            JOptionPane.showMessageDialog(this, "You must select at least one element in the selection list at the left side", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event__applyFilterButtonActionPerformed

    /**
     * Help button action performed.
     *
     * Displays a help file for the filter.
     *
     * @param evt action event.
     */
    private void _helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__helpButtonActionPerformed

        // Shows the help file of the application
        try{
        Desktop.getDesktop().open(new File("src/gui/help/filterHelp.txt"));
        }
        catch(Exception ex){
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event__helpButtonActionPerformed

    /**
     * Select all button action performed.
     * 
     * Selects all the products from the selection list in the selection panel.
     * 
     * @param evt action event.
     */
    private void _selectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__selectAllButtonActionPerformed

        _selectionKeywordList.setSelectionInterval(0, _selectionKeywordList.getModel().getSize() - 1);
    }//GEN-LAST:event__selectAllButtonActionPerformed

    /**
     * Deselect all button action performed.
     * 
     * Deselects all the products from the selection list in the selection panel.
     * 
     * @param evt action event.
     */
    private void _deselectAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__deselectAllButtonActionPerformed

        _selectionKeywordList.clearSelection();
    }//GEN-LAST:event__deselectAllButtonActionPerformed

    /**
     * Association rules menu item action performed.
     *
     * @param evt action event
     */
    private void _associationRulesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__associationRulesMenuItemActionPerformed

        // Gets the first 20 keywords from each product list

        ArrayList<ArrayList<WordInfo>> _productBestKeywordsList = new ArrayList();

        for(int index = 0; index < _productPanelList.size(); index++){

            // Gets the product list
            JList productList = _productPanelList.get(index).getProductList();

            // Generates the 10 best words keywords
            ArrayList<WordInfo> tenBestKeyWords = new ArrayList<WordInfo>();

            // Gets the first 10 elements from the list
            for(int j = 0; j < 10; j++)
                tenBestKeyWords.add((WordInfo) productList.getModel().getElementAt(j));

            // Adds it to the best keyword list
            _productBestKeywordsList.add(tenBestKeyWords);
        }

        System.out.print("-----\nThe 10 best keywords per each product");

        for(int i = 0 ; i < _productBestKeywordsList.size(); i++){

            System.out.println("Product " + i);
            for(int j = 0 ; j < _productBestKeywordsList.get(i).size(); j++){
                System.out.println(_productBestKeywordsList.get(i).get(j));
            }
            System.out.println();
        }

        // Display the association rules window
        AssociationRulesWindow.getInstance().showAssociationRulesWindow(_productBestKeywordsList);
    }//GEN-LAST:event__associationRulesMenuItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel _URLProduct;
    private javax.swing.JPanel _URLProductPanel;
    private javax.swing.JTextField _URLProductTextField;
    private javax.swing.JMenuItem _aboutUsMenuItem;
    private javax.swing.JButton _applyFilterButton;
    private javax.swing.JMenuItem _associationRulesMenuItem;
    private javax.swing.JPanel _buttonPanel;
    private javax.swing.JButton _deselectAllButton;
    private javax.swing.JMenuItem _exitMenuItem;
    private javax.swing.JMenu _fileMenu;
    private javax.swing.JPanel _filterPanel;
    private javax.swing.JButton _generateResultsButton;
    private javax.swing.JButton _helpButton;
    private javax.swing.JMenu _helpMenu;
    private javax.swing.JMenuItem _helpMenuItem;
    private javax.swing.JLabel _imageLabel;
    private javax.swing.JLabel _keywordRetrievalFilterLabel;
    private javax.swing.JTextField _keywordRetrievalFilterTextField;
    private javax.swing.JPanel _logoPanel;
    private javax.swing.JMenu _machineLearningMenu;
    private javax.swing.JMenuBar _menuBar;
    private javax.swing.JPanel _productsPanel;
    private javax.swing.JScrollPane _productsPanelScrollPane;
    private javax.swing.JPanel _resultsPanel;
    private javax.swing.JPanel _searchPanel;
    private javax.swing.JButton _selectAllButton;
    private javax.swing.JPanel _selectionButtonPanel;
    private javax.swing.JList _selectionKeywordList;
    private javax.swing.JScrollPane _selectionKeywordListScrollPane;
    private javax.swing.JLabel _selectionLabel;
    private javax.swing.JPanel _selectionPanel;
    // End of variables declaration//GEN-END:variables
}
