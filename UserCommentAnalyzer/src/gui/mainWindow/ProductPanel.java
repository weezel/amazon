/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProductPanel.java
 *
 * Created on Dec 16, 2010, 7:39:35 PM
 */
package gui.mainWindow;

import gui.productCommentsWindow.ProductCommentsWindow;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import spellChecker.SpellCheckersWindow;
import wordRetrieval.WordInfo;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;

import wordRetrieval.KeywordRetrieval;
import java.util.ArrayList;
import java.io.*;
import java.awt.Component;



/**
 * Panel which shows the list of keywords related to one product. Also has two
 * buttons to close the product, so it will not be available for further
 * comparissons, or the statistics button to print the results with plots.
 *
 * @author javiersalcedogomez
 */
public class ProductPanel extends javax.swing.JPanel {

    /**
     * Product panel index in the main window.
     */
    private int _index;
    /**
     * Product panel name in the main window.
     */
    private String _name;


    /** 
     * Creates new form ProductPanel.
     */
    public ProductPanel() {

        // Initializes the window components
        initComponents();
    }

    /**
     * Creates a new product panel.
     *
     * @param index product panel index in the main window.
     */
    public ProductPanel(int index) {

        // Initializes the window components
        initComponents();

        _index = index;
        _name = "Product " + (index + 1);
    }

    /**
     * Returns the product list which contains the keywords extracted from
     * the user product comments.
     *
     * @return the product list which contains the keywords extracted from
     * the user product comments.
     */
    public JList getProductList() {
        return _productList;
    }

    /**
     * Returns the product panel name.
     *  
     * @return the product panel name.
     */
    public String getProductPanelName() {
        return _name;
    }

    /**
     * Sets a new value to the product list data.
     *
     * @param keywordList new value to set.
     */
    public void setProductList(final WordInfo[] keywordList) {

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {

                _productList.setCellRenderer(new ColorListBox());

                if (keywordList != null && keywordList.length > 0) {
                    _productList.setListData(keywordList);
                }
            }
        });
    }

    /**
     * Searches for the keyword in the list and selects it.
     *
     * @param theWord keyword to select.
     */
    public void setSelectedKeyword(final String theWord) {

        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {

                boolean found = false;

                // Searches for the keyword in the list and selects it
                for (int index = 0; index < _productList.getModel().getSize(); index++) {

                    // Gets the element from the list
                    WordInfo wordInfo = (WordInfo) _productList.getModel().getElementAt(index);

                    // If that element is the word
                    if (wordInfo.getTheWord().matches(theWord)) {

                        // Selects it
                        _productList.setSelectedIndex(index);

                        // Keyword found
                        found = true;
                    }
                }

                // If the keyword wasn't found
                if (!found) {
                    // Clears the selected index
                    _productList.clearSelection();
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        _productScrollPane = new javax.swing.JScrollPane();
        _productList = new javax.swing.JList();
        _buttonPanel = new javax.swing.JPanel();
        _showCommentButton = new javax.swing.JButton();
        _spellCheckButton = new javax.swing.JButton();

        jPopupMenu1.setName("jPopupMenu1"); // NOI18N

        jMenuItem1.setText("Positive");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Negative");
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setBackground(new java.awt.Color(170, 185, 210));
        setForeground(new java.awt.Color(80, 80, 100));
        setPreferredSize(new java.awt.Dimension(100, 100));
        setLayout(new java.awt.GridBagLayout());

        _productScrollPane.setName("_productScrollPane"); // NOI18N
        _productScrollPane.setPreferredSize(new java.awt.Dimension(300, 350));

        _productList.setForeground(new java.awt.Color(80, 80, 100));
        _productList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        _productList.setName("_productList"); // NOI18N
        _productList.setSelectionBackground(new java.awt.Color(95, 115, 155));
        _productList.setVisibleRowCount(-1);
        _productList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _productListMouseClicked(evt);
            }
        });
        _productList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                _productListValueChanged(evt);
            }
        });
        _productScrollPane.setViewportView(_productList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(_productScrollPane, gridBagConstraints);

        _buttonPanel.setBackground(new java.awt.Color(170, 185, 210));
        _buttonPanel.setForeground(new java.awt.Color(80, 80, 100));
        _buttonPanel.setName("_buttonPanel"); // NOI18N
        _buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _showCommentButton.setBackground(new java.awt.Color(170, 185, 210));
        _showCommentButton.setForeground(new java.awt.Color(80, 80, 100));
        _showCommentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/Show.png"))); // NOI18N
        _showCommentButton.setText("Show Comment");
        _showCommentButton.setToolTipText("Shows the comments with the selected keyword highlighted in the comments");
        _showCommentButton.setName("_showCommentButton"); // NOI18N
        _showCommentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _showCommentButtonActionPerformed(evt);
            }
        });
        _buttonPanel.add(_showCommentButton);

        _spellCheckButton.setBackground(new java.awt.Color(170, 185, 210));
        _spellCheckButton.setForeground(new java.awt.Color(80, 80, 100));
        _spellCheckButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/resources/images/icons/Pinion.png"))); // NOI18N
        _spellCheckButton.setText("Spellcheck");
        _spellCheckButton.setName("_spellCheckButton"); // NOI18N
        _spellCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _spellCheckButtonActionPerformed(evt);
            }
        });
        _buttonPanel.add(_spellCheckButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(_buttonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Close button action listener. Closes the panel erasing from the 
     * panel list of the main window and updating the main window without it.
     * 
     * @param evt action event.
     */
    /**
     * Product list value changed action.
     *
     * Selects in the other list, if any, the same keyword selected in the
     * current list.
     *
     * @param evt list selection event.
     */
    private void _productListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event__productListValueChanged

        // Gets the keyword from the list
        WordInfo wordInfo = (WordInfo) _productList.getSelectedValue();

        if (wordInfo != null) // Selects the same keyword in the other lists
        {
            MainWindow.getInstance().selectKeywordInOtherLists(wordInfo.getTheWord());
        }
    }//GEN-LAST:event__productListValueChanged

    /**
     * Show comment button action.
     *
     * Shows a new window with the user comments associated to the current
     * keyword list with the selected keyword in the list highlighted in the
     * new window.
     *
     * @param evt action event.
     */
    private void _showCommentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__showCommentButtonActionPerformed

        // Displays a window with the comments related to the product and
        // the word selected in the list highlighted
        if (_productList.getSelectedIndex() != -1) {

            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {

                    // Gets the keyword from the list
                    WordInfo wordInfo = (WordInfo) _productList.getSelectedValue();

                    // Displays the product comment window
                    new ProductCommentsWindow(wordInfo.getTheWord(), _index + 1);
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, "You must select a keyword in the list first", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event__showCommentButtonActionPerformed

    /**
     * Spellcheck button action performed.
     * 
     * @param evt action event.
     */
    private void _spellCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__spellCheckButtonActionPerformed

        if (_productList.getSelectedIndex() != -1) {

            // Parses the element list into String[]
            String[] wordList = new String[_productList.getModel().getSize()];
            for (int i = 0; i < _productList.getModel().getSize(); i++) {
                WordInfo wordInfo = (WordInfo) _productList.getModel().getElementAt(i);
                wordList[i] = wordInfo.getTheWord();
            }

            // Gets the selected keyword in the list
            WordInfo selectedWord = (WordInfo) _productList.getSelectedValue();

            // Shows the spell checker window
            SpellCheckersWindow.getInstance().showWindow(wordList, selectedWord.getTheWord());
            
        } else {
            JOptionPane.showMessageDialog(this, "You have to select an element in the list", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event__spellCheckButtonActionPerformed

    private void _productListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__productListMouseClicked
        // TODO add your handling code here:
        if(evt.getButton() == evt.BUTTON3)
        {

            final int index = _productList.locationToIndex(evt.getPoint());
            _productList.setSelectedIndex(index);


            jPopupMenu1.show(_productList, evt.getX(), evt.getY());

        }


    }//GEN-LAST:event__productListMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        ArrayList theWords = new ArrayList();
        try {
        theWords = KeywordRetrieval.readWordList("src/wordRetrieval/resources/lotr.txt");
        }
        catch(IOException ex)
        {
        }

        int loc = _productList.getSelectedIndex();

        WordInfo selectedWord = (WordInfo) _productList.getSelectedValue();

        String curWord = selectedWord.getTheWord();

        int foundW = -1;
        for (int z = 0; z < theWords.size(); z++)
            if(theWords.get(z).toString().substring(0, theWords.get(z).toString().indexOf(":")).equals(curWord))
                foundW = z;

        try {

            if (foundW < 0) {
                FileWriter fstream = new FileWriter("src/wordRetrieval/resources/lotr.txt", true);
                BufferedWriter out = new BufferedWriter(fstream);         // Create file
                out.write(curWord + ":+\n");
                //Close the output stream
                out.close();
            }
            else
            {
                theWords.set(foundW, curWord + ":+");
                File del = new File("src/wordRetrieval/resources/lotr.txt");
                // Quick, now, delete it immediately:
                del.delete();
                FileWriter fstream = new FileWriter("src/wordRetrieval/resources/lotr.txt", true);
                BufferedWriter out = new BufferedWriter(fstream);         // Create file

                for (int z = 0; z < theWords.size(); z++)
                    out.write(theWords.get(z) + "\n");

                out.close();
            }

        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        ArrayList theWords = new ArrayList();
        try {
        theWords = KeywordRetrieval.readWordList("src/wordRetrieval/resources/lotr.txt");
        }
        catch(IOException ex)
        {
        }

        int loc = _productList.getSelectedIndex();

        WordInfo selectedWord = (WordInfo) _productList.getSelectedValue();

        String curWord = selectedWord.getTheWord();

        int foundW = -1;
        for (int z = 0; z < theWords.size(); z++)
            if(theWords.get(z).toString().substring(0, theWords.get(z).toString().indexOf(":")).equals(curWord))
                foundW = z;

        try {

            if (foundW < 0) {
                FileWriter fstream = new FileWriter("src/wordRetrieval/resources/lotr.txt", true);
                BufferedWriter out = new BufferedWriter(fstream);         // Create file
                out.write(curWord + ":-\n");
                //Close the output stream
                out.close();
            }
            else
            {
                theWords.set(foundW, curWord + ":-");
                File del = new File("src/wordRetrieval/resources/lotr.txt");
                // Quick, now, delete it immediately:
                del.delete();
                FileWriter fstream = new FileWriter("src/wordRetrieval/resources/lotr.txt", true);
                BufferedWriter out = new BufferedWriter(fstream);         // Create file

                for (int z = 0; z < theWords.size(); z++)
                    out.write(theWords.get(z) + "\n");

                out.close();
            }

        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel _buttonPanel;
    private javax.swing.JList _productList;
    private javax.swing.JScrollPane _productScrollPane;
    private javax.swing.JButton _showCommentButton;
    private javax.swing.JButton _spellCheckButton;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables
}
